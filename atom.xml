<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://WangXin008.github.io/wangxin.GitHub.io</id>
    <title>叁金的后花园</title>
    <updated>2021-09-10T03:32:05.963Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://WangXin008.github.io/wangxin.GitHub.io"/>
    <link rel="self" href="https://WangXin008.github.io/wangxin.GitHub.io/atom.xml"/>
    <logo>https://WangXin008.github.io/wangxin.GitHub.io/images/avatar.png</logo>
    <icon>https://WangXin008.github.io/wangxin.GitHub.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 叁金的后花园</rights>
    <entry>
        <title type="html"><![CDATA[用户体验要素]]></title>
        <id>https://WangXin008.github.io/wangxin.GitHub.io/post/yong-hu-ti-yan-yao-su/</id>
        <link href="https://WangXin008.github.io/wangxin.GitHub.io/post/yong-hu-ti-yan-yao-su/">
        </link>
        <updated>2021-09-10T03:09:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="用户体验为何如此重要">用户体验为何如此重要？</h1>
<h2 id="什么是用户体验">什么是用户体验？</h2>
<p>用户体验并不是指一件产品本身是如何工作的，用户体验是指“产品如何与外界发生联系并发挥作用”，也就是人们如何“接触”和“使用”它。</p>
<h2 id="产品设计与用户体验设计">产品设计与用户体验设计</h2>
<p>大部分时候，当提到“产品设计”时，人们往往会想到的是产品在感官方面或功能方面的表现。但如果将“设计一个用户体验良好的产品”作为明确的目标，意味着不仅仅是功能或那么简单，产品的好坏应该由“用户自身的心理感受和行为”来决定。</p>
<h2 id="用户体验的重要性">用户体验的重要性</h2>
<p>提供优质的用户体验是一个重要、可持续的竞争优势，用户体验形成了客户对企业的整体印象，界定了企业和竞争对手的差异，并且决定了客户之后还会再次光顾（客户忠诚度）。</p>
<h1 id="用户体验要素">用户体验要素</h1>
<p>五个层次的关系：</p>
<p>从具体到抽象，每一个层面都是由它下面的层面来决定，即表现层由框架层来决定，框架层则建立在结构层之上，以此类推。这种连锁效应意味着在“较高层面”中选择一个界限之外的选项将需要重新考虑“较低层面”中所做出的决策。但并不意味着每一个“较低层面”上的决策都必须在设计“较高层面”之前做出。在“较高层面”中的决定有时会促进对“较低层面”决策的一次重新评估。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/WangXin008/ProductHelpDocumentation/main/images/20210908134345.png" alt="用户体验要素" loading="lazy"></figure>
<ul>
<li>
<p><strong>表现层（surface）</strong>：在表现层我们看到的是一系列网页，由图片和文字组成。一些图片是可以点击的，从而执行某种功能，比如把你带到购物车里去的图标。</p>
</li>
<li>
<p><strong>框架层（skeleton）</strong>：按钮、控件、照片和文本区域的位置。框架层用于优化设计布局，以达到这些元素的最大的效果和效率，比如在你需要的时候，能记得标识并找到购物车的按钮。</p>
</li>
<li>
<p><strong>结构层（structure）</strong>：相比框架层，结构层更抽象。框架层确定了在结账页面上交互元素的位置；而结构层则用来设计用户如何到达某个页面，并且在他们做完事情之后能去什么地方。框架层定义了导航条上各要素的排列方式，允许用户可以浏览不同的商品分类；结构层则确定哪些类别应该出现在哪里。</p>
</li>
<li>
<p><strong>范围层（scope）</strong>：确定某个功能和特性是否应该成为网站的一部分。</p>
</li>
<li>
<p><strong>战略层（strategy）</strong>:战略不仅仅包括了经营者想从网站得到什么，还包括了用户想从网站得到什么。</p>
</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/WangXin008/ProductHelpDocumentation/main/images/20210908134437.png" alt="用户体验要素层次" loading="lazy"></figure>
<h2 id="战略层产品目标与用户需求">战略层：产品目标与用户需求</h2>
<p>战略层要解决“我们为什么开发产品？”的问题。这个问题的关键在于弄清楚我们的用户是谁，用户的需求是什么？公司的商业价值和风险是什么？</p>
<p>《用户体验要素》主要是针对用户体验的。所以作者主要提了“产品目标”和“用户需求”两个维度。</p>
<p>作为产品经理，只识别两个维度是不够的。其实对于战略层的分析，这些内容会出现在我们的BRD和MRD里面。主要包括：</p>
<ol>
<li>
<p>商业价值</p>
<p>产品能否为公司带来商业价值，带来怎么样的商业价值。一些战略型产品的商业价值可能不仅仅直接体现在盈利上面。</p>
</li>
<li>
<p>用户痛点</p>
<p>我们的用户是谁，有什么特征？我们要帮助用户解决什么问题，用户需要通过我们的产品达到什么目标？</p>
</li>
<li>
<p>市场现状和预期</p>
<p>市场的现状如何，是否存在竞品，他们的优缺点是什么？我们的市场的预期如何？</p>
</li>
<li>
<p>项目的风险</p>
<p>项目的风险有哪些，怎么规避风险？或针对这些风险，是否有解决方案？</p>
</li>
<li>
<p>项目计划</p>
<p>制定整体的开发和推广计划，确定各个里程碑的内容和日期。</p>
</li>
</ol>
<p>当然，随着市场逐步进入白炽化的阶段，竞品相似度也越来越高，所以用户体验的作用也越来越重要了。我们可以在战略阶段加入用户体验的思考。</p>
<ul>
<li><strong>是否有亮点的用户体验</strong></li>
</ul>
<p>很多产品的主要卖点就体现在用户体验上。比如提供智能便捷的内容浏览方式、一键处理照片的功能等。</p>
<ul>
<li><strong>是否有严重影响用户体验的设计</strong></li>
</ul>
<p>为了达成商业目标，我们可能会对产品进行一些商业化的设计。需要考虑过度的商业化是否影响了用户的体验，在商业化和用户体验之间如何平衡。比如我们要在产品上增加广告功能，以什么样的方式进行。直接弹框、还是内嵌到内容里面？</p>
<h2 id="范围层功能规格和内容需求">范围层：功能规格和内容需求</h2>
<p>我们做一些事情，是因为这个过程有价值，或者做出的产品有价值。而定义项目范围是同时在做这两个事，这是一个有价值的过程，同时能产生有价值的产品。</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/WangXin008/ProductHelpDocumentation/main/images/20210908134547.png" alt="范围层定义" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/WangXin008/ProductHelpDocumentation/main/images/20210908134638.png" alt="实现过程价值步骤" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/WangXin008/ProductHelpDocumentation/main/images/20210908134724.png" alt="定义产品价值要求" loading="lazy"></figure>
<h2 id="结构层交互设计与信息架构">结构层：交互设计与信息架构</h2>
<p>在定义好用户需求并排列好优先级别之后，我们对于最终产品将会包括什么特性已经有了清楚的图像。然而，这些需求并没有说明如何将这些分散的片段组成一个整体。这就是范围层的上面一层：为网站创建一个概念结构。</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/WangXin008/ProductHelpDocumentation/main/images/20210908134807.png" alt="结构层定义" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://raw.githubusercontent.com/WangXin008/ProductHelpDocumentation/main/images/20210908134845.png" alt="交互设计组成要素" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://raw.githubusercontent.com/WangXin008/ProductHelpDocumentation/main/images/20210908134915.png" alt="信息架构要求" loading="lazy"></figure>
<h2 id="框架层界面设计-导航设计和信息设计">框架层：界面设计、导航设计和信息设计</h2>
<p>虽然命名为框架层，不过在这一层我们逐步将产品从抽象到具体。到了这一层，基本上能看得出产品的轮廓。这一层我们通过已经制作好的PRD和低保真原型图，逐步细化成高保真的原型图。</p>
<figure data-type="image" tabindex="9"><img src="https://raw.githubusercontent.com/WangXin008/ProductHelpDocumentation/main/images/20210908134953.png" alt="框架层" loading="lazy"></figure>
<p>框架层是结构层的细化。包括了如下的工作：</p>
<ol>
<li>
<p><strong>信息设计</strong></p>
<p>对已经定义好的信息架构进行细化。例如，在结构层，我们已经定义好了商品信息需要包含大概的信息。在框架层再进一步细化，商品的详情包括了，商品名称、商品数量、商品产地等详细等字段。</p>
</li>
<li>
<p><strong>页面细化</strong></p>
<p>在结构层已经定义好的页面结构基础上进一步细化。如页面的具体布局，页面元素的选择等。这一步将低保真的页面细化成高保真的页面。</p>
</li>
<li>
<p><strong>交互设计</strong></p>
<p>页面的交互设计，用户操作后页面的响应。例如，是否需要弹窗提示、是否需要滑动效果等。</p>
</li>
</ol>
<h2 id="表现层感知设计">表现层：感知设计</h2>
<p>表现层这里解决并弥补“产品框架层的逻辑排布”的感知呈现问题。比如，通过关注信息设计，我们决定了这些信息元素应该如何分组和排列；通过关注视觉设计，我们决定这种安排在视觉上应该如何呈现。</p>
<p>表现层是将框架层设计好的高保真原型图，最终输出设计稿的步骤。这个是产品设计的最后一步。</p>
<p>这一层主要是UI设计师的工作。如产品的配色方案，主题色和辅助色的选择、产品的风格，扁平风格或者拟物风格等的选择。</p>
<h1 id="要素的应用">要素的应用</h1>
<p>我们大概可以将我们日常的工作归类到各个层次里面：</p>
<ul>
<li><strong>战略层</strong> -- MRD和BRD</li>
<li><strong>范围层</strong> -- PRD（部分）</li>
<li><strong>结构层</strong> -- PRD（部分）和低保真原型</li>
<li><strong>框架层</strong> -- 高保真原型和交互设计</li>
<li><strong>表现层</strong> -- UI设计</li>
</ul>
<p>但是，在应用用户五要素的模型时，也不能完完全全直接的套用到工作流程里面。这个模型更多的是提供给我们一个思考的方式，而并非是一个指导产品设计的流程。</p>
<p>日常过程中，甚至有可能有部分设计环节是跟层次是反着来的。例如，我经常使用思维导图将产品的结构整理出来（结构层），然后再进一步的细化出需求说明（范围层）。但是，本质上还是从需求到结构的一个过程。</p>
<p>另外，不同的团队由不同的构成，有些团队没有交互设计师，产品包揽了需求到交互的所有环节。产品这个职位在每个团队的功能也不一样。产品开发环节，有些团队是产品主导的，产品主导了战略层到结构层的各个环节、有些团队是交互设计师主导的，产品只需要负责战略层和范围层。</p>
<p>但是，这个模型给我最大的启示就是。无论是产品还是交互，在产品设计时都要注重用户的需求，并且从抽象到具体的逐步设计产品。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在 Markdown 中插入视频]]></title>
        <id>https://WangXin008.github.io/wangxin.GitHub.io/post/zai-markdown-zhong-cha-ru-shi-pin/</id>
        <link href="https://WangXin008.github.io/wangxin.GitHub.io/post/zai-markdown-zhong-cha-ru-shi-pin/">
        </link>
        <updated>2021-09-06T10:30:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="插入-b-站视频">插入 B 站视频</h2>
<p>直接嵌入 B 站中已上传的视频，使用的是 B 站上的视频自带的视频播放器。</p>
<ol>
<li>
<p>在 B 站中，打开需要插入的视频，复制视频下方的“转发 &gt; 嵌入代码”。</p>
<figure data-type="image" tabindex="1"><img src="https://WangXin008.github.io/wangxin.GitHub.io/post-images/1630924287269.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>在 markdown 中粘贴对应的代码，效果如下图所示。</p>
<pre><code class="language-html">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=720018804&amp;bvid=BV1qQ4y1Y7V2&amp;cid=395043780&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;  width=&quot;700px&quot; height=&quot;472px&quot;&gt; &lt;/iframe&gt;

</code></pre>
<figure data-type="image" tabindex="2"><img src="https://WangXin008.github.io/wangxin.GitHub.io/post-images/1630924299650.png" alt="" loading="lazy"></figure>
</li>
</ol>
<h2 id="插入云上对象存储中的视频">插入云上对象存储中的视频</h2>
<p>直接插入本地已上传至公网的视频，使用的是自定义的 HTML 标签的视频播放器。</p>
<ol>
<li>
<p>将本地已有的 mp4 格式的视频文件上传至对象存储中，这里以阿里云的对象存储为例。</p>
<figure data-type="image" tabindex="3"><img src="https://WangXin008.github.io/wangxin.GitHub.io/post-images/1630924312903.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>在 markdown 中，编写如下 html 标签段，效果如下图所示。</p>
<pre><code class="language-html">&lt;video controls height='100%' width='100%' src=&quot;https://encooacademy.oss-cn-shanghai.aliyuncs.com/activity/OpenBrowser.mp4&quot;&gt;&lt;/video&gt;

</code></pre>
<blockquote>
<p><strong>说明：</strong></p>
<p>在 &quot;src&quot; 属性的值是变化的，需要更换对象存储中 mp4 视频的链接。</p>
</blockquote>
<figure data-type="image" tabindex="4"><img src="https://WangXin008.github.io/wangxin.GitHub.io/post-images/1630924324982.png" alt="" loading="lazy"></figure>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github + Markdown 写作环境]]></title>
        <id>https://WangXin008.github.io/wangxin.GitHub.io/post/github-markdown-xie-zuo-huan-jing/</id>
        <link href="https://WangXin008.github.io/wangxin.GitHub.io/post/github-markdown-xie-zuo-huan-jing/">
        </link>
        <updated>2021-09-06T10:29:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>本文主要介绍通过使用 GitHub Desktop 和 Visual Studio Code 工具，搭建编写 markdown 格式的文档的写作环境。</p>
<h2 id="github-desktop">Github Desktop</h2>
<p><a href="https://desktop.github.com/">Github  Desktop</a> 是用 Git 做版本控制的代码托管平台，它提供了 web 界面，你可以在上面创建资源仓库来存放你的项目。</p>
<h2 id="visual-studio-code">Visual Studio Code</h2>
<p><a href="https://code.visualstudio.com/Download">Visual Studio Code</a> 是一款代码编辑器。再加上丰富的插件库和集成 Git，可以很方便的完成从写作到发布，用它来写 markdown 格式的文章等再适合不过了。</p>
<h2 id="基于-vscode-搭建-markdown-写作环境">基于 VSCode 搭建 Markdown 写作环境</h2>
<ol>
<li>
<p>安装好 Github Desktop 后，具体的使用，可参考 <a href="https://www.jianshu.com/p/a6fc842f501d">GitHub Desktop 图文教程</a>。</p>
</li>
<li>
<p>安装好 Visual Studio Code 后，具体的使用，可参考 <a href="https://zhuanlan.zhihu.com/p/56943330">使用 VSCode 编写 Markdown</a>。</p>
</li>
<li>
<p>Github Desktop 工具与 Visual Studio Code 工具关联：</p>
<figure data-type="image" tabindex="1"><img src="https://WangXin008.github.io/wangxin.GitHub.io/post-images/1630924195812.png" alt="" loading="lazy"></figure>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[技术传播]]></title>
        <id>https://WangXin008.github.io/wangxin.GitHub.io/post/ji-zhu-chuan-bo/</id>
        <link href="https://WangXin008.github.io/wangxin.GitHub.io/post/ji-zhu-chuan-bo/">
        </link>
        <updated>2021-09-06T10:28:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><strong>技术传播</strong> 是指与技术性产品、软件或服务有关且伴随其全部生命周期的所有技术信息的传递和交互。即，如何在人与人或者人与机器之间有效地传递和分享产品技术信息。</p>
<h2 id="从技术写作到技术传播">从技术写作到技术传播</h2>
<ul>
<li>创意写作（Creative writing），打动人的心灵</li>
<li>文案写作（Commercial copy writing），销售产品</li>
<li>商务写作（Bussiness writing），商务邮件、合同、纪要等，便于商务使用</li>
<li>科学写作（Scientific writing），记录和分享科学发现</li>
<li><strong>技术写作（Technical writing），解释工作原理、指导用户完成特定操作</strong></li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://WangXin008.github.io/wangxin.GitHub.io/post-images/1630924124109.png" alt="" loading="lazy"></figure>
<h2 id="技术传播的价值">技术传播的价值</h2>
<p><strong>技术传播</strong> 是企业与用户之间对话的桥梁。是产品的组成部分，满足法律法规要求。</p>
<ul>
<li>帮助用户自助服务，降低企业服务成本。</li>
<li>是用户了解产品的利器，提升产品品牌和营销力。</li>
<li>以用户思维，驱动提升产品可用性。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文档质量]]></title>
        <id>https://WangXin008.github.io/wangxin.GitHub.io/post/wen-dang-zhi-liang/</id>
        <link href="https://WangXin008.github.io/wangxin.GitHub.io/post/wen-dang-zhi-liang/">
        </link>
        <updated>2021-09-06T10:26:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><strong>技术文档质量</strong>是产品帮助中心质量的重要组成部分。对于帮助中心而言，理解用户在技术文档使用中的信息行为，能帮助技术文档写作人员开发出对用户更友好的产品资料。</p>
<h2 id="文档质量评估方式">文档质量评估方式</h2>
<ul>
<li>
<p><strong>质量控制</strong></p>
<ol>
<li>文档测试（随版本专业团队测试、模拟小白测试、专项测试）</li>
<li>文档上线 1+1 审核（正确性编辑、校验）</li>
<li>低错检查</li>
</ol>
</li>
<li>
<p><strong>质量评估</strong></p>
<ol>
<li>用户使用文档的数据分析（跳出率/点击量/PV/负反馈/提问题量）</li>
<li>对服务侧的引导分析（工单拦截率、点赞/点踩数、工单趋势分析）</li>
<li>内部评估（比对 DQTI 制定的 checklist）</li>
</ol>
</li>
</ul>
<h2 id="高质量文档写作的要素">高质量文档写作的要素</h2>
<p>在评估帮助中心质量时，常常考虑帮助中心信息的 <strong>易找性</strong>、<strong>易用性</strong>、<strong>易理解性</strong>。</p>
<p><strong>易使用</strong></p>
<ul>
<li>面向任务：帮助用户完成任务，已达到他们使用产品的目的。</li>
<li>精确：避免错误，称述事实的真相。</li>
<li>完整：包含所有必要的内容（仅限于必要的内容）。</li>
</ul>
<p><strong>易理解</strong></p>
<ul>
<li>清晰：避免使用含糊不清，晦涩难懂的词语。让读者在第一次阅读这句句子时，即了解到句子所要表达的所有意思。</li>
<li>具体：提供适当的例子、情景介绍、明喻、类比、具体的语法举例、图表。</li>
<li>风格：使用妆具正确性和精准性的词汇和词组，培养严谨的写作习惯。</li>
</ul>
<p><strong>易查找</strong></p>
<ul>
<li>组织：连贯的内容组织和编排，符合用户的使用场景和目的。</li>
<li>可检索：内容的呈现方式需要使用户能够快速和容易的定位到所需要的具体内容。</li>
<li>视觉效果：使用布局、插图、颜色、图标和其他图形化的表达方式来形成具有吸引力和需要强调的文字。</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://WangXin008.github.io/wangxin.GitHub.io/post-images/1630924048600.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[信息体验]]></title>
        <id>https://WangXin008.github.io/wangxin.GitHub.io/post/xin-xi-ti-yan/</id>
        <link href="https://WangXin008.github.io/wangxin.GitHub.io/post/xin-xi-ti-yan/">
        </link>
        <updated>2021-09-06T10:24:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="目标">目标</h2>
<p>减少文档，优化交互信息，提升用户体验。<br>
<img src="https://WangXin008.github.io/wangxin.GitHub.io/post-images/1630923920394.png" alt="" loading="lazy"></p>
<h2 id="建议">建议</h2>
<p>信息体验改进的4个层次。</p>
<figure data-type="image" tabindex="1"><img src="https://WangXin008.github.io/wangxin.GitHub.io/post-images/1630923929751.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[技术写作协作流程]]></title>
        <id>https://WangXin008.github.io/wangxin.GitHub.io/post/ji-zhu-xie-zuo-xie-zuo-liu-cheng/</id>
        <link href="https://WangXin008.github.io/wangxin.GitHub.io/post/ji-zhu-xie-zuo-xie-zuo-liu-cheng/">
        </link>
        <updated>2021-09-06T10:06:50.000Z</updated>
        <content type="html"><![CDATA[<p>如下为用 <strong>开发需求</strong> 的方式写文档时与其它角色协作的流程(仅供参考，每个公司流程可能会不一样)：</p>
<ul>
<li><strong>PM</strong>: Product Manager, 产品经理。</li>
<li><strong>TW</strong>: Technical Writer, 技术写作者。</li>
<li><strong>DEV</strong>: Developer, 开发者。</li>
<li><strong>QA</strong>: Quality Assurance, 测试工程师。</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://WangXin008.github.io/wangxin.GitHub.io/post-images/1630922925152.png" alt="技术写作协作流程" loading="lazy"></figure>
<blockquote>
<p><strong>说明：</strong></p>
<p>PBI 指 Product Backlog Item，一般使用 Azure DevOps、JIRA 等工具创建 PBI 进行问题跟踪。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[技术写作流程]]></title>
        <id>https://WangXin008.github.io/wangxin.GitHub.io/post/ji-zhu-xie-zuo-liu-cheng/</id>
        <link href="https://WangXin008.github.io/wangxin.GitHub.io/post/ji-zhu-xie-zuo-liu-cheng/">
        </link>
        <updated>2021-08-30T06:40:37.000Z</updated>
        <content type="html"><![CDATA[<p>在 敏捷开发、产品快速迭代 之时，正常情况下是 两周一个迭代，一个月一次产品发布，我在工作中是这样安排我的技术写作流程的。<br>
<img src="https://WangXin008.github.io/wangxin.GitHub.io/post-images/1630305705544.png" alt="manual" loading="lazy"></p>
<ol>
<li>收集产品需求</li>
</ol>
<p>在软件产品提测时，向 PM 收集已细化的产品需求，通常是以一个个任务项（PBI）的形式存在，PM 将此次迭代的 PBI 分配给我。</p>
<ol start="2">
<li>理解产品需求</li>
</ol>
<p>梳理并分析产品需求，了解需求来源、需求背景、用户痛点等等，了解本次迭代新增了哪些功能，优化了哪些功能，修复了什么 BUG 等等。</p>
<ol start="3">
<li>操作使用产品</li>
</ol>
<p>结合每一个 PBI 的功能，操作使用产品，在使用产品的过程中，深入理解产品功能，为构思产品文档大纲和编写产品文档作铺垫。</p>
<ol start="4">
<li>设计文档大纲</li>
</ol>
<p>与设计产品架构一样，可以参考竞品或查找资料，设计拟定文档的主要大纲结构，包括每一篇内容的设计。</p>
<ol start="5">
<li>编写文档初稿</li>
</ol>
<p>正式开始按所理解和操作的产品功能进行编写文档内容，当然如果中间遇到任何问题，可以与 PBI 中标注的开发人员进行咨询，以辅助完成文档初稿的编写。</p>
<ol start="6">
<li>评审与修订初稿</li>
</ol>
<p>组织 PM、开发人员以及相关人员进行评审初稿文档，遇到问题即时修订更正。可以是会议，可以是邮件。</p>
<ol start="7">
<li>发布文档</li>
</ol>
<p>随着产品的发布，在产品发布后的一至两天内，应立即将对应的文档发布至文档网站。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[技术文档工程师]]></title>
        <id>https://WangXin008.github.io/wangxin.GitHub.io/post/ji-zhu-wen-dang-gong-cheng-shi/</id>
        <link href="https://WangXin008.github.io/wangxin.GitHub.io/post/ji-zhu-wen-dang-gong-cheng-shi/">
        </link>
        <updated>2021-03-10T10:34:48.000Z</updated>
        <content type="html"><![CDATA[<p>最近，部门领导安排了一项工作，招聘一名技术文档工程师，HR小姐姐很是不理解，这是一个什么样子的职位？是需要英语专业的做软件产品工作的？还是需要计算机专业的英语出色的？就这个问题，带大家了解一下这个职位。</p>
<h2 id="什么是技术文档工程师">什么是技术文档工程师</h2>
<p>通俗来讲，技术文档工程师，即，写使用说明书的工作人员。</p>
<h2 id="什么是技术文档">什么是技术文档</h2>
<p><strong>技术文档</strong>旨在解答用户对产品的各种疑问，帮助用户理解产品的功能，并一步步指导用户开始上手使用产品。</p>
<p>技术文档一般包含产品介绍、快速起步、参考文档等章节。</p>
<ul>
<li><strong>产品介绍</strong>：告诉用户，这款软件能为他带来什么价值。</li>
<li><strong>快速起步</strong>：一般针对初级用户，指导用户怎样一步步上手使用产品的基本功能。</li>
<li><strong>参考文档</strong>：一般针对高级用户，用户可以根据自己的需要来查询所需功能所在的章节，根据文档来学习如何使用。</li>
</ul>
<h2 id="技术文档分类">技术文档分类</h2>
<ul>
<li>
<p><strong>按企业内外部分</strong>：</p>
<ul>
<li>
<p><strong>外部文档</strong>：提供给企业外部的客户使用，该客户一般为产品的最终用户或基于你的产品进行二次开发的外部公司。</p>
</li>
<li>
<p><strong>内部文档</strong>：提供给企业内部的人员使用。如，不同的项目之间，程序员如果要调用彼此的功能，则需要依赖于技术文档。</p>
</li>
</ul>
</li>
<li>
<p><strong>按语言分</strong>：</p>
<ul>
<li>
<p><strong>中文文档</strong>：国内互联网企业，一般都是写中文文档。</p>
</li>
<li>
<p><strong>非中文文档</strong>：外企中，一般情况下需要英语文档，如果有国际化需求，则在英语的基础上将文档翻译成包括中文在内的不同语言。该部分的工作，一般由翻译团队进行负责。</p>
</li>
</ul>
</li>
</ul>
<h2 id="技术文档工程师职责">技术文档工程师职责</h2>
<p>技术文档工程师的职责一般包括编写技术文档、编写其他文档、管理技术文档。</p>
<ul>
<li><strong>编写技术文档</strong></li>
</ul>
<p>编写技术文档主要由以下三个阶段组成。</p>
<ol>
<li>收集信息：一般需要向特定人员进行收集信息，包括不限于程序员、测试工程师、运维工程师、项目经理、产品经理，等等。</li>
<li>使用产品：从用户的角度来了解产品的使用痛点，更好地编写产品使用手册。</li>
<li>编写文档：按照项目的格式、规范、要求，编写技术文档。</li>
</ol>
<ul>
<li><strong>编写其他文档</strong></li>
</ul>
<p>团队中所有跟文字相关的工作，都会与你相关，包括但不限于产品的需求文档、市场推广文档，团队汇报PPT以及产品界面上所有的文字信息等等</p>
<ul>
<li><strong>管理技术文档</strong></li>
</ul>
<p>产品不断更新，文档也需要同步持续更新，因此，管理技术文档主要是对文档进行持续更新、编译、测试与发布。</p>
<h2 id="技术文档工程师要求">技术文档工程师要求</h2>
<p>一名技术文档工程师，通常会从如下三个方面来考察。</p>
<ul>
<li>
<p><strong>语言能力</strong>：非英语专业的，最好有四六级、雅思、托福之类的认证。</p>
</li>
<li>
<p><strong>技术/逻辑能力</strong>：最好了解一到两门简单的编程语言,不需要太精通，简单了解即可，如，Javascript、Python。</p>
</li>
<li>
<p><strong>人际沟通能力</strong>：因为需涉及到与团队中的其他角色的成员进行沟通，所以一般需要沟通能力强、理解能力佳的。</p>
</li>
</ul>
]]></content>
    </entry>
</feed>